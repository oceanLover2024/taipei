[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 2456b6e..4e39af3 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -112,6 +112,8 @@[m [mvenv/[m
 ENV/[m
 env.bak/[m
 venv.bak/[m
[32m+[m[32m.venv/[m
[32m+[m
 [m
 # Spyder project settings[m
 .spyderproject[m
[1mdiff --git a/app.py b/app.py[m
[1mindex 996d4ee..e73d36c 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -1,3 +1,5 @@[m
[32m+[m[32mimport os[m
[32m+[m[32mfrom  dotenv import load_dotenv[m
 from datetime import datetime,timezone,timedelta, date[m
 from fastapi import *[m
 from fastapi.middleware.cors import CORSMiddleware[m
[36m@@ -6,11 +8,24 @@[m [mfrom fastapi.security import HTTPBearer,HTTPAuthorizationCredentials[m
 from fastapi.staticfiles import StaticFiles[m
 import jwt[m
 import mysql.connector[m
[32m+[m[32mfrom mysql.connector.pooling import MySQLConnectionPool[m
 from passlib.context import CryptContext[m
 from pydantic import BaseModel, EmailStr[m
 import requests[m
[32m+[m[32mload_dotenv()[m
[32m+[m[32mpartner_key=os.getenv("partner_key")[m
[32m+[m[32mmerchant_id=os.getenv("merchant_id")[m
[32m+[m[32mmy_pool = MySQLConnectionPool([m
[32m+[m[32m    host="127.0.0.1",[m
[32m+[m[32m    user="root",[m
[32m+[m[32m    password=os.getenv("password"),[m
[32m+[m[32m    database="taipei_day_trip",[m
[32m+[m[32m    pool_size=10,[m
[32m+[m[32m    pool_reset_session=True[m
[32m+[m[32m)[m
[32m+[m
 def connect_mysql():[m
[31m-	return  mysql.connector.connect( user="root",password="newPassword1234!", host="127.0.0.1", database="taipei_day_trip")[m
[32m+[m[32m    return my_pool.get_connection()[m
 app= FastAPI()[m
 app.mount("/static", StaticFiles(directory="static",html=False), name="static")[m
 app.add_middleware([m
[36m@@ -22,7 +37,7 @@[m [mapp.add_middleware([m
 bearer_tool=HTTPBearer()[m
 password_tool=CryptContext(schemes=['bcrypt'],deprecated='auto')[m
 ALGORITHM="HS256"[m
[31m-secret_key="123"[m
[32m+[m[32msecret_key=os.getenv("secret_key")[m
 def create_token(data:dict):[m
 	to_encode=data.copy()[m
 	expire=datetime.now(timezone.utc)+timedelta(days=7)[m
[36m@@ -71,219 +86,200 @@[m [mclass Order(BaseModel):[m
 	order:Orderdetail[m
 @app.post("/api/user")[m
 def register(user:Register):[m
[31m-	try:[m
[31m-		con=connect_mysql()[m
[31m-		cursor=con.cursor(dictionary=True)[m
[31m-		cursor.execute("SELECT id FROM member WHERE email=%s",(user.email,))[m
[31m-		db_user=cursor.fetchone()[m
[31m-		if db_user:[m
[31m-			raise HTTPException(status_code=400,detail={"error":True,"message":"註冊失敗，Email已被註冊"})[m
[31m-		hashed_password=password_tool.hash(user.password)		[m
[31m-		cursor.execute("INSERT INTO member(name,email,password)values(%s,%s,%s)",(user.name,user.email,hashed_password))[m
[31m-		con.commit()[m
[31m-		return{"ok":True}[m
[32m+[m	[32mtry:[m[41m [m
[32m+[m		[32mwith connect_mysql() as con:[m
[32m+[m			[32mwith con.cursor(dictionary=True, buffered=True) as cursor:[m[41m		[m
[32m+[m				[32mcursor.execute("SELECT id FROM member WHERE email=%s",(user.email,))[m
[32m+[m				[32mdb_user=cursor.fetchone()[m
[32m+[m				[32mif db_user:[m
[32m+[m					[32mraise HTTPException(status_code=400,detail={"error":True,"message":"註冊失敗，Email已被註冊"})[m
[32m+[m				[32mhashed_password=password_tool.hash(user.password)[m[41m		[m
[32m+[m				[32mcursor.execute("INSERT INTO member(name,email,password)values(%s,%s,%s)",(user.name,user.email,hashed_password))[m
[32m+[m				[32mcon.commit()[m
[32m+[m				[32mreturn{"ok":True}[m
 	except mysql.connector.Error:[m
 		raise HTTPException(status_code=500,detail={"error":True,"message":"伺服器內部錯誤"})[m
[31m-	finally:[m
[31m-		cursor.close()[m
[31m-		con.close()[m
[32m+[m[41m	[m
 @app.put("/api/user/auth")[m
 def signin(user:Signin):[m
 	try:[m
[31m-		con=connect_mysql()[m
[31m-		cursor=con.cursor(dictionary=True)[m
[31m-		cursor.execute("SELECT id, name, email, password FROM member WHERE email=%s",(user.email,))[m
[31m-		db_user= cursor.fetchone()[m
[31m-		if not db_user or not password_tool.verify(user.password,db_user["password"]):[m
[31m-			raise HTTPException(status_code=400,detail={"error":True,"message":"登入失敗，帳號或密碼錯誤"})[m
[31m-		token=create_token({[m
[31m-			"id":db_user["id"],[m
[31m-			"name":db_user["name"],[m
[31m-			"email":db_user["email"],		[m
[31m-		})[m
[31m-		return{"token":token}[m
[32m+[m		[32mwith connect_mysql() as con:[m
[32m+[m			[32mwith con.cursor(dictionary=True, buffered=True) as cursor:[m[41m			[m
[32m+[m				[32mcursor.execute("SELECT id, name, email, password FROM member WHERE email=%s",(user.email,))[m
[32m+[m				[32mdb_user= cursor.fetchone()[m
[32m+[m				[32mif not db_user or not password_tool.verify(user.password,db_user["password"]):[m
[32m+[m					[32mraise HTTPException(status_code=400,detail={"error":True,"message":"登入失敗，帳號或密碼錯誤"})[m
[32m+[m				[32mtoken=create_token({[m
[32m+[m					[32m"id":db_user["id"],[m
[32m+[m					[32m"name":db_user["name"],[m
[32m+[m					[32m"email":db_user["email"],[m[41m		[m
[32m+[m				[32m})[m
[32m+[m				[32mreturn{"token":token}[m
 	except mysql.connector.Error:[m
 		raise HTTPException(status_code=500,detail={"error":True,"message":"伺服器內部錯誤"})[m
[31m-	finally:[m
[31m-		con.close()[m
[31m-		cursor.close()[m
[32m+[m[41m	[m
 @app.get("/api/user/auth")[m
 def current_user(data:dict=Depends(verify_token)):[m
 	try:[m
[31m-		con=connect_mysql()[m
[31m-		cursor=con.cursor(dictionary=True)[m
[31m-		cursor.execute("SELECT id, name, email FROM member where email=%s",(data["email"],))[m
[31m-		db_user=cursor.fetchone()[m
[31m-		if not db_user:[m
[31m-			return {"data":None}[m
[31m-		return {"data":db_user}[m
[32m+[m		[32mwith connect_mysql() as con:[m
[32m+[m			[32mwith con.cursor(dictionary=True, buffered=True) as cursor:[m
[32m+[m				[32mcursor.execute("SELECT id, name, email FROM member where email=%s",(data["email"],))[m
[32m+[m				[32mdb_user=cursor.fetchone()[m
[32m+[m				[32mif not db_user:[m
[32m+[m					[32mreturn {"data":None}[m
[32m+[m				[32mreturn {"data":db_user}[m
 	except mysql.connector.Error:[m
 		raise HTTPException(status_code=500,detail={"error":True,"message":"伺服器內部錯誤"})[m
[31m-	finally:[m
[31m-		con.close()[m
[31m-		cursor.close()[m
[32m+[m[41m	[m
 @app.get("/api/booking")[m
 def get_booking(user:dict=Depends(verify_token)):		[m
 	try:[m
[31m-		con=connect_mysql()[m
[31m-		cursor=con.cursor(dictionary=True)		[m
[31m-		cursor.execute("SELECT a.id, a.name, a.address, i.url, b.date, b.time, b.price From attractions a INNER JOIN booking b ON a.id = b.attraction_id LEFT JOIN imgs i ON  a.id = i.attraction_id WHERE b.member_id=%s",(user["id"],))[m
[31m-		data=cursor.fetchone()[m
[31m-		if not data:[m
[31m-			return {"data":None}[m
[31m-		return{[m
[31m-			"data":{[m
[31m-				"attraction":{[m
[31m-					"id":data["id"],[m
[31m-					"name":data["name"],[m
[31m-					"address":data["address"],[m
[31m-					"image":data["url"][m
[31m-				},[m
[31m-				"date":data["date"],[m
[31m-				"time":data["time"],[m
[31m-				"price":data["price"][m
[31m-			}[m
[31m-		}[m
[32m+[m		[32mwith connect_mysql() as con:[m
[32m+[m			[32mwith con.cursor(dictionary=True, buffered=True) as cursor:[m[41m		[m
[32m+[m				[32mcursor.execute("SELECT a.id, a.name, a.address, i.url, b.date, b.time, b.price From attractions a INNER JOIN booking b ON a.id = b.attraction_id LEFT JOIN imgs i ON  a.id = i.attraction_id WHERE b.member_id=%s",(user["id"],))[m
[32m+[m				[32mdata=cursor.fetchone()[m
[32m+[m				[32mif not data:[m
[32m+[m					[32mreturn {"data":None}[m
[32m+[m				[32mreturn{[m
[32m+[m					[32m"data":{[m
[32m+[m						[32m"attraction":{[m
[32m+[m							[32m"id":data["id"],[m
[32m+[m							[32m"name":data["name"],[m
[32m+[m							[32m"address":